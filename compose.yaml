# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  client_and_reverse_proxy:
    container_name: coolview_client
    build:
      context: ./
      dockerfile: ./IoTPortal.Client/Dockerfile
      target: final
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - coolview-client-nginx-logs:/var/log/nginx
      - coolview-client-nginx-certificates:/etc/nginx/certificates
      - coolview-client-certbot:/usr/share/nginx/html/certbot/
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      server:
        condition: service_healthy
  
  server:
    container_name: coolview_server
    build:
      context: ./
      dockerfile: ./IoTPortal.Server/Dockerfile
      target: final
    restart: always
    environment:
      - POSTGRESQL_CONNECTION_STRING_FILE=/run/secrets/server-db-connection-string
      - MQTT_BROKER_USER=mosquitto
      - MQTT_BROKER_PSWD_FILE=/run/secrets/mosquitto-password
      - MQTT_BROKER_ADDRESS=mqtt_broker
      - MQTT_BROKER_PORT=8883
      - PORTAL_RSA_ISSUER=coolview.co
      - MAILING_API_KEY_FILE=/run/secrets/mailing-api-key
    secrets:
      - server-db-connection-string
      - mosquitto-password
      - mailing-api-key
    expose:
      - 5001
      - 5002
    volumes:
      - coolview-server-certificates:/app/Certificates
      - coolview-server-logs:/app/Logs
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://server:5001/api/AdminZone/Health/Ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      timescaledb:
        condition: service_healthy
      # mosquitto:
      #   condition: service_healthy

  mosquitto:
    container_name: mqtt_broker
    build: 
      context: ./
      dockerfile: ./IoTPortal.Mosquitto/Dockerfile
      secrets:
        - mosquitto-password
      args:
        - MOSQUITTO_USERNAME=mosquitto
    restart: always
    user: mosquitto
    ports:
      - 18883:8883
    volumes:
      - mosquitto-config:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    # healthcheck:
    #   test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  timescaledb:
    # image: timescale/timescaledb:latest-pg16
    image: timescale/timescaledb-ha:pg16
    container_name: timescale_db
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      # - timescale-db-data:/var/lib/postgresql/data
      - timescale-db-data:/home/postgres/pgdata/data
    environment:
      - POSTGRES_DB=iot_portal
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  timescale-db-data:
    external: true
  mosquitto-config:
    external: true
  mosquitto-data:
    external: true
  mosquitto-log:
    external: true
  coolview-server-certificates:
    external: true
  coolview-server-logs:
    external: true
  coolview-client-nginx-certificates:
    external: true
  coolview-client-nginx-logs:
    external: true
  coolview-client-certbot:
    external: true

secrets:
  db-password:
    file: IoTPortal.Secrets/db-password.txt
  mosquitto-password:
    file: IoTPortal.Secrets/mosquitto.pswd
  server-db-connection-string:
    file: IoTPortal.Secrets/server-db-connection.txt
  mailing-api-key:
    file: IoTPortal.Secrets/mailing_api_key.txt
